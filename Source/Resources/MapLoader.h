/*******************************************************************
** Copyright (C) 2014-2015 {Joey de Vries} {joey.d.vries@gmail.com}
**
** This code is part of Lucid.
** https://github.com/JoeyDeVries/Lucid
**
** Lucid is free software: you can redistribute it and/or modify it
** under the terms of the CC BY-NC 4.0 license as published by
** Creative Commons, either version 4 of the License, or (at your
** option) any later version.
*******************************************************************/
#ifndef MAP_LOADER_H
#define MAP_LOADER_H

#include <glm/glm.hpp>
#include "tinyxml2.h"
using namespace tinyxml2;

#include <memory>
#include <string>
#include <map>

class ResourceManager;
class Texture2D;
class Material;
class Scene;

/*
    Holds all functionality required to load a map/level into the game's scene graph.
    Each game level is loaded from a .tmx XML file as generated by the Tiled program,
    carefully generating the scenegraph based on level-editor specified data.
*/
class MapLoader
{
private:
	std::map<int, std::shared_ptr<Material>> m_IDToMaterial; // holds a list of generated materials from the pre-processed map data

    // processes a shared tile render node 
	bool processTileNode(ResourceManager *resources, Scene *scene, XMLElement *tileNode);
    // processes each individual tile
	bool processTileData(ResourceManager *resources, Scene *scene, XMLElement *tileData, glm::vec2 pos, glm::vec2 scale, int depth, bool physics);
    // processes the individual game objects
	bool processGameObject(ResourceManager *resources, Scene *scene, XMLElement *gameObject, glm::vec2 tileScale, float mapScale);
    // processes the global static defaults of each map
	bool processStaticDefaults(ResourceManager *resources, Scene *scene, XMLElement *map);

    // getters
    std::string                getProperty(XMLElement *object, std::string property);
    std::shared_ptr<Texture2D> getSpecularMapIfExists(ResourceManager *resources, std::string diffusePath);
    std::shared_ptr<Texture2D> getNormalMapIfExists(ResourceManager *resources, std::string diffusePath);
public:
	MapLoader();
	~MapLoader();

    // loads a map from a .tmx file, generating a complete scenegraph
	bool LoadMap(ResourceManager *resources, Scene *scene, const char *tmxPath, float levelScale = 1.0f);

};
#endif